<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Programming in LabVIEW MathScript-For Loops</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>23d48699-c901-48a9-8393-e7df451fa68f</md:uuid>
</metadata>
  <content>

<section id="SecForLoop">
	  <title>The For Loop</title>
<para id="ParaForLoopIntro">
The <emphasis>for loop</emphasis> is one way to make LABVIEW MATHSCRIPT repeat a series of computations using different values. The for loop has the following syntax:
<code display="block" id="idp825072">
for d = array
    % LABVIEW MATHSCRIPT command 1
    % LABVIEW MATHSCRIPT command 2
    % and so on
end
</code>
In the for loop, <code>array</code> can be any vector or array of values.   The for loop works like this: <code>d</code> is set to the first value in <code>array</code>, and the sequence of LABVIEW MATHSCRIPT commands in the body of the for loop is executed with this value of <code>d</code>. Then <code>d</code> is set to the second value in  <code>array</code>, and the sequence of LABVIEW MATHSCRIPT commands in the body of the for loop is executed with this value of <code>d</code>. This process continues through all of the values in <code>array</code>.
So a for loop that performs computations for values of <code>d</code> from 1.0 to 2.0 is:
<code display="block" id="idm14091312">
for d = 1.0:0.05:2.0
    % LABVIEW MATHSCRIPT command 1
    % LABVIEW MATHSCRIPT command 2
    % and so on
end
</code>
(Recall that <code>1.0:0.05:2.0</code> creates a vector of values from 1.0 to 2.0.)
</para>
<para id="element-194">Note that in all of the examples in this module, the LABVIEW MATHSCRIPT commands inside the for loop are indented relative to the <code>for</code> and <code>end</code> statements. This is not required by LABVIEW MATHSCRIPT but is common practice and makes the code much more readable.</para><para id="ParaForLoopIntro2">
A useful type of for loop is one that steps a counter variable from 1 to some upper value:
<code display="block" id="idm9395856">
for j = 1:10
    % LABVIEW MATHSCRIPT commands
end
</code>
For example, this type of loop can be used to compute a sequence of values that are stored in the elements of a vector. An example of this type of loop is
<code display="block" id="idm3662256">
% Store the results of this loop computation in the vector v
for j = 1:10
    % LABVIEW MATHSCRIPT commands
    % More LABVIEW MATHSCRIPT commands to compute a complicated result
    v(j) = result;
end
</code>
</para><para id="element-199">Using a for loop to access and manipulate elements of a vector (as in this example) may be the most natural approach, particularly when one has previous experience with other programming languages such as C or Java. However, many problems can be solved without for loops by using LABVIEW MATHSCRIPT's built-in vector capabilities. Using these capabilities almost always improves computational speed and reduces the size of the program. Some would also claim that it is more elegant.</para><para id="element-310">For loops can also contain other for loops. For example, the following code performs the LABVIEW MATHSCRIPT commands for each combination of <code>d</code> and <code>c</code>:
<code display="block" id="idm988928">
for d=1:0.05:2
    for c=5:0.1:6
        % LABVIEW MATHSCRIPT Commands
    end
end
</code></para>

</section>

  </content>
</document>