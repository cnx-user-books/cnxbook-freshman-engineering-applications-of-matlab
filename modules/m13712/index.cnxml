<document xmlns="http://cnx.rice.edu/cnxml" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:md="http://cnx.rice.edu/mdml">



<title>Basic operations in LabVIEW MathScript</title>
<metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>a13be9ed-72f7-4562-8817-87da2572e4cf</md:uuid>
</metadata>
<content>

  <section id="id31833631">
    <title>Basic Operations on Numbers</title>
    <para id="id31833641">LABVIEW MATHSCRIPT has many
    arithmetic operations and functions built in. Most of them are
    straightforward to use. The <link target-id="commonMatS">Table</link> below lists some commonly used
    scalar operations; in this table, <code>x</code> and <code>y</code> are scalars.  (A scalar is a single number.)
    <table frame="all" id="commonMatS" summary="">
      <title>Common scalar mathematical operations in LABVIEW MATHSCRIPT</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <colspec colnum="2" colname="c2"/>
        <colspec colnum="4" colname="c4"/>
        <thead valign="top">
          <row>
            <entry align="center">Operation</entry>
            <entry align="center">LABVIEW MATHSCRIPT</entry>
          </row>
        </thead>
        <tbody valign="top">
          <row>
            <entry align="center"><m:math><m:apply><m:minus/><m:ci>x</m:ci><m:ci>y</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>x-y</code></entry>
          </row>
          <row>
            <entry align="center"><m:math><m:apply><m:plus/><m:ci>x</m:ci><m:ci>y</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>x+y</code></entry>
          </row>
          <row>
            <entry align="center"><m:math><m:apply><m:times/><m:ci>x</m:ci><m:ci>y</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>x*y</code></entry>
          </row>
          <row>
            <entry align="center"><m:math><m:apply><m:divide/><m:ci>x</m:ci><m:ci>y</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>x/y</code></entry>
          </row>
          <row>
            <entry align="center"><m:math><m:apply><m:power/><m:ci>x</m:ci><m:ci>y</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>x^y</code></entry>
          </row>
          <row> 
            <entry align="center"><m:math><m:apply><m:power/><m:ci>e</m:ci><m:ci>x</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>exp(x)</code></entry>
          </row>
          <row>
            <entry align="center"><m:math><m:apply><m:ci type="function">log10</m:ci><m:ci>x</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>log10(x)</code></entry>
          </row>
          <row>
            <entry align="center"><m:math><m:apply><m:ci type="function">ln</m:ci><m:ci>x</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>log(x)</code></entry>
          </row>
          <row>
            <entry align="center"><m:math><m:apply><m:ci type="function">log2</m:ci><m:ci>x</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>log2(x)</code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    </para>
    
    <para id="id113">
    Expressions are formed from numbers,  variables,  and these operations. The operations have different precedences. The <code>^</code> operation has the highest precedence; <code>^</code> operations are evaluated before any other operations.  Multiplication and division have the next highest precedence, and addition and subtraction have the lowest precedence. Precedence is altered by parentheses; expressions within parenthesesare evaluated before expressions outside parentheses.
    </para>

    <example id="example119">
      <para id="example119p">
      The <link target-id="example119t">Table</link>  below shows several mathematical formulas, the corresponding  LABVIEW MATHSCRIPT expressions,  and the values that LABVIEW MATHSCRIPT would compute for the expressions.
    <table frame="all" id="example119t" summary="">
      <title>Example LABVIEW MATHSCRIPT Expressions</title>
      <tgroup cols="3" align="left" colsep="1" rowsep="1">
        <colspec colnum="2" colname="c2"/>
        <colspec colnum="4" colname="c4"/>
        <colspec colnum="6" colname="c6"/>
        <thead valign="top">
          <row>
            <entry align="center">formula</entry>
            <entry align="center">LABVIEW MATHSCRIPT Expression</entry>
            <entry align="center">Computed Value</entry>
          </row>
        </thead>
        <tbody valign="top">
          <row>
            <entry align="center">
              <m:math>
                <m:apply>
                  <m:plus/>
                    <m:apply><m:power/><m:cn>5</m:cn><m:cn>2</m:cn></m:apply>
                    <m:apply><m:power/><m:cn>4</m:cn><m:cn>2</m:cn></m:apply>
                </m:apply>
              </m:math>
            </entry>
            <entry align="center"><code>5^2+4^2</code></entry>
            <entry align="center"><code>41</code></entry>
          </row>
          <row>
            <entry align="center">
              <m:math>
                <m:apply>
                  <m:power/>
                    <m:apply><m:plus/><m:cn>5</m:cn><m:cn>4</m:cn></m:apply>
                    <m:cn>2</m:cn>
                </m:apply>
              </m:math>
            </entry>
            <entry align="center"><code>(5+4)^2</code></entry>
            <entry align="center"><code>81</code></entry>
          </row>
          <row>
            <entry align="center">
              <m:math>
                <m:apply>
                  <m:divide/>
                    <m:apply><m:plus/><m:cn>2</m:cn><m:cn>3</m:cn></m:apply>
                    <m:apply><m:minus/><m:cn>4</m:cn><m:cn>5</m:cn></m:apply>
                </m:apply>
              </m:math>
            </entry>
            <entry align="center"><code>(2 + 3)/(4 - 5)</code></entry>
            <entry align="center"><code>-5</code></entry>
          </row>
          <row>
            <entry align="center">
              <m:math>
                <m:apply>
                  <m:ci type="function">log10</m:ci>
                    <m:cn>100</m:cn>
                </m:apply>
              </m:math>
            </entry>
            <entry align="center"><code>log10(100)</code></entry>
            <entry align="center"><code>2</code></entry>
          </row>
          <row>
            <entry align="center">
              <m:math>
                <m:apply>
                  <m:ci type="function">ln</m:ci>
                  <m:apply> 
                          <m:times/>
                            <m:cn>4</m:cn>
                            <m:apply><m:plus/><m:cn>2</m:cn><m:cn>3</m:cn></m:apply>
                  </m:apply>
                </m:apply>
              </m:math>
            </entry>
            <entry align="center"><code>log(4*(2+3))</code></entry>
            <entry align="center"><code>2.9957</code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
      </para>
    </example>

  </section>
  <section id="id111">
    <title>Basic Operations on  Matrices</title>
    <para id="id112">
    In addition to scalars, LABVIEW MATHSCRIPT can operate on matrices. Some common matrix operations are shown in the <link target-id="commonMatM">Table</link> below; in this table, <code>M</code> and <code>N</code> are  matrices.
    <table frame="all" id="commonMatM" summary="">
      <title>Common matrix mathematical operations in LABVIEW MATHSCRIPT</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <colspec colnum="2" colname="c2"/>
        <colspec colnum="4" colname="c4"/>
        <thead valign="top">
          <row>
            <entry align="center">Operation</entry>
            <entry align="center">LABVIEW MATHSCRIPT</entry>
          </row>
        </thead>
        <tbody valign="top">
          <row>
            <entry align="center"><m:math><m:apply><m:times/><m:ci>M</m:ci><m:ci>N</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>M*N</code></entry>
          </row>
          <row>
            <entry align="center"><m:math><m:apply><m:power/><m:ci>M</m:ci><m:cn>-1</m:cn></m:apply></m:math></entry>
            <entry align="center"><code>inv(M)</code></entry>
          </row>
          <row>
            <entry align="center"><m:math><m:apply><m:power/><m:ci>M</m:ci><m:ci>T</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>M'</code></entry>
          </row>
          <row>
            <entry align="center">det(<m:math><m:ci>M</m:ci></m:math>)</entry>
            <entry align="center"><code>det(M)</code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    </para>
    
    <para id="para120">
      LABVIEW MATHSCRIPT functions <code>length</code> and <code>size</code> are used to
      find the dimensions of vectors and matrices, respectively.
    </para>
    <para id="para129">
      LABVIEW MATHSCRIPT can perform an operation  on each element of a vector or matrix.  To perform an arithmetic operation on each element in a vector (or matrix), rather than on the
      vector (matrix) itself, then the operator should be preceded by
      ".", e.g <code>.*</code>, <code>.^</code> and <code>./</code>.
    </para>
    <example id="example4">
      <para id="example4p2">
        Let <m:math>
        <m:apply>
          <m:eq/>
          <m:ci>A</m:ci>
          <m:matrix>
            <m:matrixrow>
              <m:cn> 1 </m:cn>
              <m:cn> 1 </m:cn>
            </m:matrixrow>
            <m:matrixrow>
              <m:cn> 1 </m:cn>
              <m:cn> 1 </m:cn>
            </m:matrixrow>
          </m:matrix>
        </m:apply>
        </m:math>. 
        Then <code>A^2</code> will return
        <m:math>
          <m:apply>
            <m:eq/>
            <m:ci>AA</m:ci>
            <m:matrix>
              <m:matrixrow>
                <m:cn> 2 </m:cn>
                <m:cn> 2 </m:cn>
              </m:matrixrow>
              <m:matrixrow>
                <m:cn> 2 </m:cn>
                <m:cn> 2 </m:cn>
              </m:matrixrow>
            </m:matrix>
          </m:apply>
          </m:math>,
          while <code>A.^2</code> will return
          <m:math>
            <m:apply>
              <m:eq/>
              <m:matrix>
                <m:matrixrow>
                  <m:apply><m:power/><m:cn>1</m:cn><m:cn>2</m:cn></m:apply>
                  <m:apply><m:power/><m:cn>1</m:cn><m:cn>2</m:cn></m:apply>
                </m:matrixrow>
                <m:matrixrow>
                  <m:apply><m:power/><m:cn>1</m:cn><m:cn>2</m:cn></m:apply>
                  <m:apply><m:power/><m:cn>1</m:cn><m:cn>2</m:cn></m:apply>
                </m:matrixrow>
              </m:matrix>
              <m:matrix>
                <m:matrixrow>
                  <m:cn> 1 </m:cn>
                  <m:cn> 1 </m:cn>
                </m:matrixrow>
                <m:matrixrow>
                  <m:cn> 1 </m:cn>
                  <m:cn> 1 </m:cn>
                </m:matrixrow>
              </m:matrix>
              
            </m:apply>
            </m:math>.
      </para>
    </example>

    <example id="example5">
      <para id="example5p2">
        Given a vector x, compute a vector y having elements
        <m:math>
          <m:apply>
            <m:eq/>
            <m:apply><m:ci>y</m:ci><m:ci>n</m:ci></m:apply>
            <m:apply>
              <m:divide/>
              <m:cn>1</m:cn>
              <m:apply><m:sin/><m:apply><m:ci>x</m:ci><m:ci>n</m:ci></m:apply></m:apply>
            </m:apply>
          </m:apply>
          </m:math>.

          This can be easily be done in LABVIEW MATHSCRIPT by typing <code>y=1./sin(x)</code>
          Note that using <code>/</code> in place of <code>./</code> would result in the (common) error
          <code>Matrix dimensions must agree</code>.
      </para>
    </example>

  </section>


  <section id="id31827532">
    <title>Complex numbers</title>
    <para id="id31827542">LABVIEW MATHSCRIPT has excellent support for complex
    numbers with several built-in functions available. The imaginary
    unit is denoted by <code>i</code> or (as preferred in electrical engineering) <code>j</code>.
    To create complex variables 
    <m:math>
      <m:apply>
        <m:eq/>
        <m:ci><m:msub><m:mi>z</m:mi><m:mi>1</m:mi></m:msub></m:ci>
        <m:apply>
          <m:plus/>
          <m:cn>7</m:cn>
          <m:imaginaryi/>
        </m:apply> 
      </m:apply>
    </m:math>
    and

    <m:math>
      <m:apply>
        <m:eq/>
        <m:ci><m:msub><m:mi>z</m:mi><m:mi>2</m:mi></m:msub></m:ci>
        <m:apply>
          <m:times/>
          <m:cn>2</m:cn>
          <m:apply>
            <m:power/>
            <m:ci>e</m:ci>
            <m:apply>
              <m:times/>
              <m:imaginaryi/>
              <m:pi/>
            </m:apply>
          </m:apply> 
        </m:apply>
      </m:apply>
    </m:math>
    simply enter
    <code>z1 = 7 + j</code> and <code>z2 = 2*exp(j*pi)</code></para>

    <para id="id31827626">The <link target-id="table2">Table</link> below  gives an overview of the basic
    functions for manipulating complex numbers, where <m:math><m:ci>z</m:ci></m:math> is a complex number.</para>

    <table frame="all" id="complexNum" summary="">
      <title>Manipulating complex numbers in LABVIEW MATHSCRIPT</title>
      <tgroup cols="2" align="left" colsep="1" rowsep="1">
        <colspec colnum="2" colname="c2"/>
        <colspec colnum="4" colname="c4"/>
        <thead valign="top">
          <row>
            <entry align="center"/>
            <entry align="center">LABVIEW MATHSCRIPT</entry>
          </row>
        </thead>
        <tbody valign="top">
          <row>
            <entry align="center">Re(<m:math><m:ci>z</m:ci></m:math>)</entry>
            <entry align="center"><code>real(z)</code></entry>
          </row>
          <row>
            <entry align="center">Im(<m:math><m:ci>z</m:ci></m:math>)</entry>
            <entry align="center"><code>imag(z)</code></entry>
          </row>
          <row>
            <entry align="center"><m:math><m:apply><m:abs/><m:ci>z</m:ci></m:apply></m:math></entry>
            <entry align="center"><code>abs(z)</code></entry>
          </row>
          <row>
            <entry align="center">Angle(<m:math><m:ci>z</m:ci></m:math>)</entry>
            <entry align="center"><code>angle(z)</code></entry>
          </row>
          <row>
            <entry align="center"><m:math><m:apply><m:power/><m:ci>z</m:ci><m:cn>*</m:cn></m:apply></m:math></entry>
            <entry align="center"><code>conj(z)</code></entry>
          </row>
        </tbody>
      </tgroup>
    </table>

  </section>
  <section id="otherDet">
    <title>Other Useful Details</title>
    <para id="p1other">
      <list list-type="bulleted" id="id11814914"><item>A <emphasis>semicolon</emphasis> added at the end of a line tells LABVIEW MATHSCRIPT to suppress
        the command output to the display.</item>
        <item>LABVIEW MATHSCRIPT Version 1.0 is <emphasis>case sensitive</emphasis> for both variables and functions; for example, <code>b</code> and <code>B</code> are different variables and LABVIEW MATHSCRIPT will recognize the built-in function <code>sum</code> but not  <code>SUM</code>.  In previous versions, LABVIEW MATHSCRIPT was not case sensitive for function names.</item>
        <item>Often it is useful to <emphasis>split a statement</emphasis> over multiple lines. To split a
        statement across multiple lines, enter three periods <code>...</code> at the end of
        the line to indicate it continues on the next line.</item>
      </list>
    </para>
    <example id="exSplit">
      <para id="exSplitPara">Splitting 
      <m:math>
        <m:apply>
          <m:eq/>
          <m:ci>y</m:ci>
          <m:apply>
            <m:plus/>
            <m:ci>a</m:ci>
            <m:ci>b</m:ci>
            <m:ci>c</m:ci>
          </m:apply>
        </m:apply>              
        </m:math> over multiple lines.
        <code display="block" id="idp5079920">
  y = a...
  + b...
  c;</code>
      </para>
    </example>

  </section>
</content>
</document>